name: Continuous Delivery

on:
  push:
    branches:
      - main
      - staging
      - qa
      - develop

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.env_allocation.outputs.env_name }}

    steps:
      - name: Fetch environment based on the target branch
        id: env_allocation
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env_name=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "env_name=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/qa" ]; then
            echo "env_name=qa" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "env_name=development" >> $GITHUB_OUTPUT
          else
            echo "Branch '${{ github.ref }}' doesn't have deployment set up"; exit 1
          fi

  build:
    name: Build
    needs: prepare
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.env_name }}
    
    steps:
      - uses: actions/checkout@v4

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ env.AWS_REGION }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # deploy:
  #   name: Deploy
  #   needs: build
  #   runs-on: ubuntu-latest
  #   environment: ${{ needs.build.outputs.env_name }}

  #   steps:
  #     - uses: actions/checkout@v4      

  #     - name: Deployed
  #       run: echo Deployed!
